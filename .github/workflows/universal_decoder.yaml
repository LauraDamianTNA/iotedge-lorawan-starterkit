name: Universal Decoder CI TNA
on: [push] # rebuild any PRs and main branch changes
  # pull_request:
  # push:
  #   branches:
  #     - master
  #     - dev

jobs:
  Build-And-Test:
    name: Build and Test Solution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Samples/UniversalDecoder/modules/UniversalDecoder
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use node JS
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install
      - name: Get vendor file
        run: |
          npm run codecs
      - name: Run Tests
        run: |
          npm test

# # https://docs.microsoft.com/en-us/azure/container-instances/container-instances-github-action
#   Create-Image:
#     name: Push Image in Azure Container Registry
#     needs: Build-And-Test
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v2
       
      - name: Login to registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME_TEMPLD195 }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD_TEMPLD195 }}
      - name: Get the image version
        id: vars
        run: |
          echo ::set-output name=tag::0.0.$(echo ${GITHUB_SHA})
      - name: Build the tagged Docker image
        run: DOCKER_BUILDKIT=1 docker build  --rm -f "Dockerfile.arm32v7" -t ${{ secrets.CONTAINER_REGISTRY }}/universaldecoder:${{steps.vars.outputs.tag}}-arm32v7 "." 
      - name: Push the tagged Docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY }}/universaldecoder:${{steps.vars.outputs.tag}}-arm32v7
# DOCKER_BUILDKIT=1 docker build --rm -f "Dockerfile.amd64" -t templd195.azurecr.io/universaldecoder:${{steps.vars.outputs.tag}}-amd64 .
# docker push templd195.azurecr.io/universaldecoder:${{steps.vars.outputs.tag}}-amd64

          

      - run: echo "üçè This job's status is ${{ job.status }}."



